extends c

snippet ife
if ( ${1:expression} )
{
   $2
}
else
{
   $3
}
${4:$0}
endsnippet

snippet fun "c style function"
/*..............................................................................
 * @brief $2
 *
 * Input Parameters:
 *    @param: ${3/\w+\s+(\w+)\s*,*\s*/\n*        $1/g}
 * Return Value:
 *    @returns $1
 *
 * External methods/variables:
 *    @extern
 *............................................................................*/
${1:return type} ${2:function name} ( ${3: parameters} )
{
	$1 ${4:variable Name} = ${5: default value};
	$0
	return $4;/*$1*/
}
endsnippet


snippet cppfun "cpp style function"
/*..............................................................................
 * @brief $3
 *
 * Input Parameters:
 *    @param: ${4/\w+\s+(\w+)\s*,*\s*/\n *        $1/g}
 * Return Value:
 *    @returns $1
 *
 * External methods/variables:
 *    @extern
 *............................................................................*/
${1:return type} ${2:class name}::${3:function name} ( ${4: parameters} )
{
	$1 ${5:variable Name} = ${6: default value};
	$0
	return $5;/*$1*/
}
endsnippet

snippet switch "switch case"
switch ${1:input}
{
	default:
		$0
	break;
}
endsnippet

snippet class "cpp class declaration"
class ${1: name of the class}
{
	private:
		$0
	protected:

	public:
		$1( );
		virtual ~$1( );
};
endsnippet

snippet vct "declares vector"
vector< $1 > $0;
endsnippet

snippet vctit "declares iterator to vector"
vector< $1 >::iterator $0;
endsnippet

snippet map "declares map"
map< $1, $2> $0;
endsnippet

snippet mapit "declares iterator to map"
map< $1, $2>::iterator $0;
endsnippet

snippet for "for loop"
for( ${1:loop iterator} = ${2: initial value}; $1 < ${3: limit}; ++$1 )
{
	$0;
}
endsnippet

snippet forit "iterator based for loop"
for( ${1: iterator} = ${2: map name}.begin(); $1 < $2.end(); ++$1 )
{
	$0;
}
endsnippet

snippet if "if condition"
if ( ${1: condition} )
{
	$0;
}

